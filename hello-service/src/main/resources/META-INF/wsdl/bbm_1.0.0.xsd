<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xnal="urn:oasis:names:tc:ciq:xnal:3" xmlns:xal="urn:oasis:names:tc:ciq:xal:3"
	xmlns:ct="urn:trajano.net:ct:2.0" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation xml:space="preserve">This is the Base Business Model (bbm) schema.  The purpose of this schema is
to document cardinality used at an enterprise level.  Unlike the ct schema,
this will not have a namespace defined.  It is meant to be redefined with
restrictions by other schemas that are application specific.

The restriction is primarily used to make mandatory fields mandatory or
restrict enumerations or choices to a more restrictive subset.

All elements, unless there is explicit documentation, are to be made optional.
Element and type naming follow the one documented in the ct schema.  File
version standards also follow the ct schema standards.  The maxOccurs is either
1 or unbounded.

Most elements are going to be derived by extension, so the content model is 
sequence unless it is known that it will not be extended.  This is a limitation
of the XML Schema.

Like ct, there are only types and aggregate elements, but no elements that
are meant to be used as a root document.</xs:documentation>
	</xs:annotation>

	<xs:import schemaLocation="ct_2.0.0.xsd" namespace="urn:trajano.net:ct:2.0" />

	<xs:import
		schemaLocation="http://docs.oasis-open.org/ciq/v3.0/prd03/xsd/default/xsd/xAL.xsd"
		namespace="urn:oasis:names:tc:ciq:xal:3" />

	<xs:import
		schemaLocation="http://docs.oasis-open.org/ciq/v3.0/prd03/xsd/default/xsd/xNAL.xsd"
		namespace="urn:oasis:names:tc:ciq:xnal:3" />

	<xs:complexType name="Account">
		<xs:annotation>
			<xs:documentation xml:space="preserve">Generic account type.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="accountNO" type="xs:token">
			<xs:annotation>
				<xs:documentation xml:space="preserve">Although this is designated as a number, it may contain alpha numeric data.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:anyAttribute namespace="##other">
			<xs:annotation>
				<xs:documentation>This attribute allows the account type to support
					other groupings aside from the ones defined in this schema.
				</xs:documentation>
			</xs:annotation>
		</xs:anyAttribute>
	</xs:complexType>

	<xs:complexType name="InternationalBankAccount">
		<xs:complexContent>
			<xs:restriction base="Account">
				<xs:attribute name="accountNO">
					<xs:annotation>
						<xs:documentation xml:space="preserve">Although this is designated as a number, it may contain alpha numeric data.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:token">
							<xs:pattern value="^[A-Z][A-Z][0-9 A-Z]+$"></xs:pattern>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="CanadianBankAccount">
		<xs:annotation>
			<xs:documentation xml:space="preserve">This represents a Canadian bank account which is based on the CPA format. The
transit number is specified as a whole rather than separating the branch from
the institution number as an account number should have all the components. The
institution number may be explicitly written as an implementation detail.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Account">
				<xs:attribute name="transitNumber">
					<xs:annotation>
						<xs:documentation xml:space="preserve">This is the transit number.  It allows for both YYYYY-XXX and 0XXXYYYYY formats
where XXX is the institution number and YYYYY is the branch number.
Derivations of this type may choose to limit it to one format.
</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:token">
							<xs:pattern value="\d\d\d\d\d\-\d\d\d"></xs:pattern>
							<xs:pattern value="0\d\d\d\d\d\d\d\d"></xs:pattern>
							<xs:length value="9"></xs:length>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="UsBankAccount">
		<xs:annotation>
			<xs:documentation xml:space="preserve">This only provides the RTN.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Account">
				<xs:attribute name="routingTransitNumber">
					<xs:simpleType>
						<xs:restriction base="xs:token">
							<xs:pattern value="\d{9}"></xs:pattern>
							<xs:length value="9"></xs:length>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="account" type="Account"></xs:element>
	<xs:element name="internationalBankAccount" type="InternationalBankAccount"
		substitutionGroup="account"></xs:element>
	<xs:element name="canadianBankAccount" type="CanadianBankAccount"
		substitutionGroup="account"></xs:element>
	<xs:element name="usBankAccount" type="UsBankAccount"
		substitutionGroup="account"></xs:element>

	<xs:complexType name="FinancialComponent">
		<xs:annotation>
			<xs:documentation>This represents a component in a financial
				transaction.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="account" minOccurs="0"></xs:element>
			<xs:element name="amount" type="ct:CurrencyAmount"
				minOccurs="0"></xs:element>
			<xs:group ref="ct:DescriptionGroup"></xs:group>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="Event">
		<xs:annotation>
			<xs:documentation xml:space="preserve">This represents a business event. A business event represents a either a point
in time or a period. Time components for both Date and DateTime are provided to
allow clients to choose which precision they would require.  The time objects
are business values and should be elements.  
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:choice>
				<xs:element name="date" type="xs:date" minOccurs="0">
					<xs:annotation>
						<xs:documentation xml:space="preserve">Date when this event had started.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="timestamp" type="xs:dateTime"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>timestamp when this event had started.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:sequence>
					<xs:annotation>
						<xs:documentation>Date range for the event.
						</xs:documentation>
					</xs:annotation>
					<xs:element name="startDate" type="xs:date" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Date when this event had started.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="endDate" type="xs:date" minOccurs="0">
						<xs:annotation>
							<xs:documentation>Date when this event finishes. Please note
								that
								this represents the end of the day for the date. (e.g.
								startDate
								= 1/1 and endDate = 1/1 represent one single day).
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:sequence>
					<xs:annotation>
						<xs:documentation>Timestamp range for the event.
						</xs:documentation>
					</xs:annotation>
					<xs:element name="startTS" type="xs:dateTime" minOccurs="0">
						<xs:annotation>
							<xs:documentation>timestamp when this event had started.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="endTS" type="xs:dateTime" minOccurs="0">
						<xs:annotation>
							<xs:documentation>timestamp when this event finishes.
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:choice>
			<xs:choice>
				<xs:element name="effectiveDate" type="xs:date"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>Date when this event is effective. It is
							used in
							the following scenario: a person has
							been living in UK from Jan to
							April, but we only register it on
							March so it is only effective
							starting March even though the person
							had lived longer there.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="effectiveTS" type="xs:dateTime"
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>timestamp when this event is effective. It is
							used in the following scenario: a person has
							been living in UK
							from Jan to April, but we only register it on
							March so it is only
							effective starting March even though the person
							had lived longer
							there.
					</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="FinancialTransferComponent">
		<xs:annotation>
			<xs:documentation>This represents a transfer component. This is a
				Financial component with a direction.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="FinancialComponent">
				<xs:sequence>
					<xs:element name="role">
						<xs:annotation>
							<xs:documentation>Role of the component</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:token">
								<xs:enumeration value="Source">
									<xs:annotation>
										<xs:documentation>Transfer source</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="Target">
									<xs:annotation>
										<xs:documentation>Transfer target</xs:documentation>
									</xs:annotation>
								</xs:enumeration>
							</xs:restriction>
						</xs:simpleType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="FinancialTransferEvent">
		<xs:annotation>
			<xs:documentation>This represents a financial transfer event. This
				combines 0 to many FinancialTransfer components. This allows having
				multiple sources transfered to multiple targets.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Event">
				<xs:sequence>
					<xs:element name="components">
						<xs:complexType>
							<xs:sequence>
								<xs:element name="component" type="FinancialTransferComponent"
									minOccurs="0" maxOccurs="unbounded"></xs:element>
							</xs:sequence>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="Organization">
		<xs:annotation>
			<xs:documentation>An organization is comprised of 0 or more
				organization units.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="organizationUnit" type="OrganizationUnit"
				minOccurs="0" maxOccurs="unbounded"></xs:element>
		</xs:sequence>
	</xs:complexType>


	<xs:complexType name="Domain">
		<xs:choice>
			<xs:sequence>
				<xs:element name="a"></xs:element>
			</xs:sequence>
			<xs:element name="ipAddress" type="ct:IpAddress"></xs:element>
			<xs:element name="uri" type="xs:anyURI"></xs:element>
			<xs:element name="location" type="Location">
				<xs:annotation>
					<xs:documentation>A generic location.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="xal:Address">
				<xs:annotation>
					<xs:documentation>A physical address.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<xs:complexType name="User">
		<xs:sequence>
			<xs:element name="userName" type="xs:token"></xs:element>
			<xs:element name="domain" type="Domain">
				<xs:annotation>
					<xs:documentation xml:space="preserve">Represents the a logical authentication area or location of a user.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:group ref="ct:DescriptionGroup">
				<xs:annotation>
					<xs:documentation xml:space="preserve">Describes the user, usually the full name of the user.</xs:documentation>
				</xs:annotation>
			</xs:group>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="OrganizationUnit">
		<xs:sequence>
			<xs:element ref="organizationUnit" minOccurs="0"></xs:element>
			<xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Other information that may be put into the
						organization unit.
						</xs:documentation>
				</xs:annotation>
			</xs:any>
		</xs:sequence>
		<xs:attribute name="name" type="xs:normalizedString">
			<xs:annotation>
				<xs:documentation xml:space="preserve">Name of the organization unit.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:element name="organizationUnit" type="OrganizationUnit">
		<xs:annotation>
			<xs:documentation xml:space="preserve">
Represents an organization unit. An organization unit can contain another
organization unit to assemble a hierarchy.  The elements should be organized 
so that the containing element is a lower level in the hierarchy.

Therefore when reading it, it would be like this:
Archimedes Trajano 
  of Some Group 
    of Some Country 
      of Some Organization
 
Implementors would create new elements with a substitutionGroup.  This avoids
having to create type enumerations.
			</xs:documentation>
		</xs:annotation>
	</xs:element>

	<xs:complexType name="Location">
		<xs:complexContent>
			<xs:restriction base="OrganizationUnit">
				<xs:sequence>
					<xs:element ref="institution" minOccurs="0"></xs:element>
					<xs:any namespace="##other" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Other information that may be put into the
								organization unit.
						</xs:documentation>
						</xs:annotation>
					</xs:any>
				</xs:sequence>
				<xs:attribute name="name" type="xs:normalizedString">
					<xs:annotation>
						<xs:documentation xml:space="preserve">Name of the organization unit.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="location" substitutionGroup="organizationUnit"
		type="Location">
	</xs:element>
	<xs:element name="institution" substitutionGroup="organizationUnit"
		type="OrganizationUnit">
	</xs:element>

</xs:schema>